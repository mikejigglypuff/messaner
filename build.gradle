plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'checkstyle'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

checkstyle {
    toolVersion = '10.17.0'
    configFile = file("${projectDir}/google_checks.xml");
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.security:spring-security-messaging'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.mongodb:mongodb-driver-sync'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'ch.qos.logback:logback-classic'
    implementation 'org.slf4j:slf4j-api'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core:3.25.1'
    testImplementation 'org.projectlombok:lombok'
}

def frontendDir = "$projectDir/src/main/resources/react-dev"

sourceSets {
    main {
        resources {
            srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

//processResources { dependsOn "copyReactBuildFiles" }

tasks.named('test') {
    doFirst {
        environment 'SPRING_PROFILES_ACTIVE', 'test'
    }

    systemProperty "mongo.uri", System.getenv("MONGO_URI")
    systemProperty "mongo.dbname", System.getenv("MONGO_DBNAME")
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-parameters"
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

/*
tasks.register('installReact', Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "cmd", "/c", "npm audit fix && npm install"
	} else {
		commandLine "sh", "-c", "npm audit fix && npm install"
	}
}

tasks.register('buildReact', Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "cmd", "/c", "npm run build"
	} else {
		commandLine "sh", "-c", "npm run build"
	}
}

tasks.register('copyReactBuildFiles', Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}

 */

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-parameters'
}